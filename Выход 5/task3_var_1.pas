{Псевдокомментарии и комментарии - не удалять при сдаче программы!}
{$mode TP}
{$R+,B+,X-}
{$codepage UTF-8}      
(**********************************************************************)
{                   ЗАДАЧА 3 (вариант 1) 25 очков                      }
(***********************************************************************
const n = 4 {число строк}; m = 5 {число столбцов}; 
type matrix = array[1..n, 1..m] of 1..100;
Ввести (c клавиатуры) целочисленную матрицу размером n x m. 
Определить, есть ли в этой матрице ХОТЯ БЫ ОДИН ЭЛЕМЕНТ, который бы 
находился ОДНОВРЕМЕННО ВО ВСЕХ ЕЁ СТРОКАХ (ответ напечатать в виде: 
TRUE или FALSE). Если есть, то перед печатью ответа TRUE  вывести 
НА ЭКРАН все такие элементы (в порядке их возрастания). 
************************************************************************
ТРЕБОВАНИЯ:  1) Проверку матрицы осуществлять ТОЛЬКО после полного 
ввода элементов матрицы в память (то есть ВВОД – отдельно, ПРОВЕРКА -
отдельно); 2) Для проверки матрицы описать логическую функцию 
IsCommon(Х), которая за один просмотр матрицы Х  определяет, есть ли 
в ней хотя бы   один элемент, присутствующий в каждой её строке, и 
если есть, то в качестве побочного эффекта выводит на экран в порядке 
возрастания все найденные общие элементы. (Вспомогательные массивы, 
файлы  в решении не использовать; следует ИСПОЛЬЗОВАТЬ МНОЖЕСТВА.) 
3) Описать также процедуру InMatr(X) для ввода элементов матрицы.
************************************************************************
ПОДСКАЗКА по реализации функции IsCommon: для поиска ОБЩИХ элементов 
по всем строкам завести ДВА вспомогательных МНОЖЕСТВА: S - множество
общих элементов по всем строкам, R - множество элементов в текущей 
проверяемой строке (как их использовать - догадайтесь самостоятельно! 
***********************************************************************)
{  В конце текста программы (после точки) размещены тестовые матрицы,  }
{ на которых будет проверяться работа вашей программы (не удалять их !)}
(**********************************************************************)
program Task_3_var_1(input, output);
const
    n = 4; {число строк}
    m = 5; {число столбцов}
type
    matrix = array[1..n, 1..m] of 1..100;
var
    X: matrix;
    
{здесь описание процедуры InMatr(X)}
procedure InMatr(var X: matrix);
var
    i, j: integer;
    
begin
    for i := 1 to n do
        for j := 1 to m do 
            read(X[i, j]);
end;
{здесь описание булевской функции IsCommon(X)}
function IsCommon(var X: matrix): boolean;
type 
    num = set of 1..100;
var
    S, R: num;
    i, j: integer;
begin
    S := [];
    for j := 1 to m do
        S := S + [X[1, j]];
    
    for i := 2 to n do begin
        R := [];
        for j := 1 to m do
            R := R + [X[i, j]];
        S := S * R;
    end;
    if S <> [] then begin
        IsCommon := True;
        for i := 1 to 100 do
            if i in S then
                write(i);
    end
    else
        IsCommon := False;
    
end;
begin
{В этом разделе операторов НИЧЕГО НЕ МЕНЯТЬ И НИЧЕГО НЕ ДОБАВЛЯТЬ !!!}
    writeln('=======================');
    writeln('Task_3_var_1 (IsCommon)');
    writeln('=======================');
    writeln;
    writeln('Enter a ', n, ' x ', m,  ' matrix: ');
    InMatr(X);
    writeln('There are common elements:');
    writeln(IsCommon(X));
end.
{
test 1:

1  2  3  4  5 
2  3  4  5  6
3  4  5  6  7
8  7  6  5  4

Answer: 4 5    TRUE
-----------------------------

test 2:

1   2  3  4   5
3   4  5  6   7
5   7  9 11  12
9  11 13 15  17

Answer: FALSE
-----------------------------

test 3:

1  2  3  4  5
2  3  4  5  1
3  4  5  1  2
4  5  1  2  3
Answer: 1 2 3 4 5   TRUE

}
